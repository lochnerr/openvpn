#!/bin/bash

# Perform local initialization for an OpenVPN server or client.

# This would typically run on the server or client, not the Certificate Signing machine.

# This creates a private key, a csr and an openvpn configuration file. Additionally, for
# servers, diffee-hellman parameters are created. The csr should then be sent to the CA
# to be signed, generating a new certificate.

PROGRAM="${0##*/}"

usage() {

  if [ ! -z "$1" ]; then
    echo >&2
    echo "$1" >&2
  fi

  cat >&2 <<-__EOF__

	Usage: $PROGRAM [OPTION]... SERVER_NAME [CLIENT_NAME]

	Initialize OpenVPN configuration

	  Common Settings:

	  -p, --port                 Set port to use (default 1194).
	  -k, --keysize              RSA keysize for the new key (default 2048).
	  -d, --digest               Digest to use with the new key (default sha256).
	  -t, --target               Target directory (default /etc/openvpn).
	  -h, --help                 Show this help

	  Server Only Settings:

	  -n, --net                  Server Network (default 10.8.0.0).
	  -m, --mask                 Server Network Mask (default 255.255.255.0).
	  -r, --route                Route to push to client.
	  -z, --route_mask           Route network mask (default 255.255.255.0).

	  Client Only Settings:

	  -a, --address              Server Address (default SERVER_NAME).
	 --nopass                    No client key password.

	Client Example:

	$PROGRAM --port 10000 -a 54.66.34.132 vpn.example.com user123

	Server Example:

	$PROGRAM --port 10000 -n 10.77.0.0 -m 255.255.0.0 -r 192.168.77.0 -n 255.255.255.0 vpn.example.com
	
	__EOF__

  exit 1
}

# Command line options
PARAMS=""

while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage
      ;;
    -p|--port)
      PORT="$2"
      shift 2
      ;;
    -k|--keysize)
      KEYSIZE="$2"
      shift 2
      ;;
    -d|--digest)
      DIGEST="$2"
      shift 2
      ;;
    -t|--target)
      TARGET="$2"
      shift 2
      ;;
    -n|--net)
      NETWORK="$2"
      shift 2
      ;;
    -m|--mask)
      NETMASK="$2"
      shift 2
      ;;
    -r|--route)
      ROUTE="$2"
      shift 2
      ;;
    -z|--route_mask)
      ROUTE_MASK="$2"
      shift 2
      ;;
    -a|--address)
      SERVER_ADDR="$2"
      shift 2
      ;;
    --nopass)
      OPTS="-nodes $OPTS"
      shift
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      usage "Error: Unsupported flag $1"
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

die() {
  echo $1 >&2
  exit 1
}

# Set default values for options.
SERVER="$1"
CLIENT="$2"

ABBR="$SERVER"
[ -n "$CLIENT" ] && ABBR="${SERVER}-$CLIENT"

PORT="${PORT:-1194}"

NETWORK="${NETWORK:-10.8.0.0}"
NETMASK="${NETMASK:-255.255.255.0}"

ROUTE_MASK="${ROUTE_MASK:-255.255.255.0}"

SERVER_ADDR="${SERVER_ADDR:-$SERVER}"

KEYSIZE="${KEYSIZE:-2048}"
DIGEST="${DIGEST:-sha256}"

TARGET="${TARGET:-/etc/openvpn}"

BIN="./bin"
[ -e "/usr/local/bin/artifacts/client.tmpl" ] && BIN="/usr/local/bin"

cat <<-__EOF__
	NAME           $ABBR
	SERVER         $SERVER
	CLIENT         $CLIENT
	PORT           $PORT
	NETWORK        $NETWORK
	NETMASK        $NETMASK
	SERVER_ADDR    $SERVER_ADDR
	KEYSIZE        $KEYSIZE
	DIGEST         $DIGEST
	TARGET         $TARGET
	ROUTE          $ROUTE
	ROUTE_MASK     $ROUTE_MASK
	BIN            $BIN
	__EOF__

[ -z "$1" ] && usage "SERVER_NAME parameter is required"

#Path                            Source                         Where                   Description             Secret
#/root/CA/pki/ca.key                                            ca machine only	Root CA key 		YES
#/etc/openvpn/ca.crt             -- from ca			server + all clients 	Root CA certificate 	NO
#/etc/openvpn/server.crt         -- from ca			server only 		Server Certificate 	NO
#/etc/openvpn/crl.pem            -- from ca                     server + ca		Cert Revocation List	NO
#/etc/openvpn/dh3072.pem         -- generated by openvpn-init	server only 		Diffie Hellman parms 	NO
#/etc/openvpn/server.key         -- generated by openvpn-init	server only 		Server Key 		YES
#/etc/openvpn/${ABBR}.req        -- generated by openvpn-init	server + ca		Signing Request	NO
#/etc/openvpn/server.ovpn        -- generated by openvpn-init	server			Configuration		NO
#/etc/openvpn/${ABBR}-ta.key     -- generated by openvpn-sign	server + all clients 	TLS Auth Key	 	YES
#/etc/openvpn/${ABBR}.tgz        -- generated by openvpn-sign	server + all clients 	Results Package	YES

init_common() {

  KEYFILE="$TARGET/${ABBR}.key"
  [ -n "$1" ] && KEYFILE="$TARGET/${1}.key"

  # Generate the key and csr.
  echo "Generating key and csr request."

  # Generate the key and csr.
  openssl req \
    -new -$DIGEST -newkey rsa:$KEYSIZE $OPTS \
    -subj "/CN=${ABBR}" \
    -keyout $KEYFILE -out $TARGET/${ABBR}.req

  # Display the csr.
  openssl req -noout -text -in $TARGET/${ABBR}.req >$TARGET/csr-info.txt
  cat $TARGET/csr-info.txt
}

init_server() {

  if [ -e $TARGET/server.key ]; then
    echo "$TARGET/server.key file exists, nothing to do!"
    return 0
  fi

  # Create the server configuration.
  if [ ! -e $TARGET/openvpn.conf ]; then
    sed \
    -e "s:\$PORT:$PORT:" \
    -e "s:\$NETWORK:$NETWORK:" \
    -e "s:\$NETMASK:$NETMASK:" \
    -e "s:\$DIGEST:$DIGEST:" \
    $BIN/artifacts/server.tmpl >$TARGET/openvpn.conf
    if [ -n "$ROUTE_NET" ]; then
      sed -i \
      -e "s:\$ROUTE_NET:$ROUTE_NET:" \
      -e "s:\$ROUTE_MASK:$ROUTE_MASK:" \
      -e "s:#push:push:" \
      $TARGET/openvpn.conf
    fi
  fi

  # Generate diffee-hellman parameters.
  if [ ! -e $TARGET/dh3072.pem ]; then
    echo "Generating diffee-helman parameters."
    openssl dhparam -out $TARGET/dh3072.pem 3072
  fi

  OPTS="-nodes $OPTS"

  init_common server.key

  cat <<-__EOF__

	You should now transport the $TARGET/${ABBR}.req file to the CA so that the request can be signed.

	Then retrieve the results archive from the CA and untar it, for example:
	   cd /etc/openvpn
	   scp user@ca-host:/path_to_ca/${ABBR}.tgz .
	   tar -xzf ${ABBR}.tgz

	__EOF__
}

init_client() {

  if [ -e $TARGET/${ABBR}.key ]; then
    echo "$TARGET/${ABBR}.key file exists, nothing to do!"
    return 0
  fi

  # Create the client configuration.
  if [ ! -e $TARGET/${SERVER}-${CLIENT}.ovpn ]; then
    echo "Generating client configuration."
    echo "tmpl dir: $BIN/artifacts/client.tmpl"
    sed \
    -e "s:\$PORT:$PORT:" \
    -e "s:\${SERVER}:${SERVER}:" \
    -e "s:\${CLIENT}:${CLIENT}:" \
    -e "s:\${SERVER_ADDR}:${SERVER_ADDR}:" \
    -e "s:\$DIGEST:$DIGEST:" \
    $BIN/artifacts/client.tmpl >$TARGET/${SERVER}-${CLIENT}.ovpn
  fi

  init_common

  cat <<-__EOF__

	You should now transport the $TARGET/${ABBR}.req signing request file to the CA so it can be signed.

	Then retrieve the results archive from the CA and untar it, for example:
	   cd /home/$CLIENT/.cert
	   scp user@ca-host:/path_to_ca/${ABBR}.tgz .
	   tar -xzf ${ABBR}.tgz

	__EOF__
}

[ -z "$CLIENT" ] && init_server
[ -n "$CLIENT" ] && init_client

exit 0

